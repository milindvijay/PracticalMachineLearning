{
    "contents" : "---\ntitle: \"Practical Machine Learning Project - Quality of Weight Lifting Exercise\"\nauthor: \"Milind Kulkarni\"\ndate: \"Sunday, May 01, 2016\"\noutput: html_document\n---\n\n## BACKGROUND\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).\n \n## DATA\n#### Load required libraries\n```{r}\nlibrary(caret)\nlibrary(randomForest)\nlibrary(ggthemes)\nlibrary(gridExtra)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(e1071)\n```\n\n#### Load the data\n```{r}\nrm(list = ls())\nif (!file.exists(\"pml-training.csv\")) {\n  download.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\", destfile = \"pml-training.csv\")\n}\nif (!file.exists(\"pml-testing.csv\")) {\n  download.file(\"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\", destfile = \"pml-testing.csv\")\n}\ntrain <- read.csv(\"pml-training.csv\", sep = \",\", na.strings = c(\"\", \"NA\"))\n```\n#### Explore and transform the data\nLet's explore the data for useful variables and any missing values.\n\n```{r results='hide'}\nstr(train)\n```\nThe train dataset includes 160 comumns and 19622 rows. Many columns include NA, so let's remove these from the dataset. In addition, let's also remove the columns unrelated to the sensor movements. This results in a dataset with 53 variables.\n\n```{r}\ntrain_used <- train[,c(8:11,37:49,60:68,84:86,102,113:124,140,151:160)]\n```\nLet's explore the data further with density plot made of a selection of the data.\n\n```{r}\nPlot1 <- ggplot() + geom_density(aes(x=gyros_belt_x), colour=\"red\", data = train_used) + geom_density(aes(x=gyros_belt_y), colour=\"green\", data = train_used) + geom_density(aes(x=gyros_belt_z), colour=\"blue\", data = train_used) + theme_few() + xlab(\"Gyro Belt (xyz)\")\n\nPlot2 <- ggplot() + geom_density(aes(x=roll_belt), colour=\"red\", data = train_used) + geom_density(aes(x=pitch_belt), colour=\"green\", data = train_used) + geom_density(aes(x=yaw_belt), colour=\"blue\", data = train_used) + theme_few() + xlab(\"Pitch Belt (xyz)\")\n\nPlot3 <- ggplot() + geom_density(aes(x=magnet_belt_x), colour=\"red\", data = train_used) + geom_density(aes(x=magnet_belt_y), colour=\"green\", data = train_used) + geom_density(aes(x=magnet_belt_z), colour=\"blue\", data = train_used) + theme_few() + xlab(\"Magnet Belt (xyz)\")\n\nPlot4 <- ggplot() + geom_density(aes(x=roll_dumbbell), colour=\"red\", data = train_used) + geom_density(aes(x=pitch_dumbbell), colour=\"green\", data = train_used) + geom_density(aes(x=yaw_dumbbell), colour=\"blue\", data = train_used) + theme_few() + xlab(\"Dumbbell movement (yaw, pitch, roll\")\n\nDplots <- arrangeGrob(Plot1, Plot2, Plot3, Plot4, nrow=2, ncol=2)\ngrid.draw(Dplots)\n```\n\n#### Partition the data\nLet's partition the dataset in training and testing datasets, with 60% of the original data in the training set and 40% in the testing dataset.\n\n```{r}\ntrain_part <- createDataPartition(train_used$classe, p = 0.6, list = FALSE)\ntraining <- train_used[train_part,]\ntesting <- train_used[-train_part,]\n```\n\n## Build the model\nMany methods of classification were attempted, including naive Bayes, multinomial logistic regression, and support vector machines. it was determined that the Random Forest method produces the best results. In addition, pre-processing using principal component analysis was attempted however this greatly reduced the predition accuracy.\n\n#### Random Forest Model\nThe below section shows the confusion matrix, the out of the bag error rate. It includes a plot of the error rate vs. number of trees.\n\n```{r}\nset.seed(1777)\nrandom_forest <- randomForest(classe~., data=training, ntree=500, importance=TRUE)\nrandom_forest\nplot(random_forest, main=\"Random Forest: Error Rate Vs. Number of Trees\")\n```\n\n##### Variable Influence\n\nBelow plot shows the importance of variables in building this model. The more the accuracy of the random forest model decreases due to exclusion of a single variable the more imprtant that variable is deemed to be. Similarly, mean decrease in the Gini coefficient is a measure of how each variable contributes to the homogenity of the nodes and leaves in the resulting random forest.\n\n```{r}\nimp <- importance(random_forest)\nimpL <- imp[,c(6,7)]\nimp.ma <- as.matrix(impL)\nimp.df <- data.frame(imp.ma)\n\nwrite.csv(imp.df, \"imp.df.csv\", row.names = TRUE)\nimp.df.csv <- read.csv(\"imp.df.csv\", header = TRUE)\n\ncolnames(imp.df.csv) <-  c(\"Variable\", \"MeanDecreaseAccuracy\", \"MeanDecreaseGini\")\nimp.sort <- imp.df.csv[order(-imp.df.csv$MeanDecreaseAccuracy),]\n\nimp.sort = transform(imp.df.csv, Variable = reorder(Variable, MeanDecreaseAccuracy))\n\nVIP <- ggplot(data=imp.sort, aes(x=Variable, y=MeanDecreaseAccuracy)) + ylab(\"Mean Decrease Accuracy\") + xlab(\"\") + geom_bar(stat=\"identity\", fill=\"orange\", alpha=0.8, width=0.75) + coord_flip() + theme_few()\n\nimp.sort.Gini = transform(imp.df.csv, Variable = reorder(Variable, MeanDecreaseGini))\n\nVIP.Gini <- ggplot(data=imp.sort.Gini, aes(x=Variable, y=MeanDecreaseGini)) + ylab(\"Mean Decrease Gini\") + xlab(\"\") + geom_bar(stat=\"identity\", fill=\"orange\", alpha=0.8, width=0.75) + coord_flip() + theme_few()\n\nVarImpPlot <- arrangeGrob(VIP, VIP.Gini, ncol=2)\ngrid.draw(VarImpPlot)\n```\n\n\n## Apply Model to Test Dataset\n\n```{r}\ntest_predictions <- predict(random_forest, newdata=testing)\nCM <- confusionMatrix(test_predictions, testing$classe)\nCM\n```\n\nThe model accurarely (99.24%) predicted all of the 20 test subjects.\n\n## Cross Validation\n\nBelow is the code and error rates from the CV from the caret package. The model with CV leads to slightly poorer performance then the random forest.\n\n```{r}\nCV <- trainControl(method = \"CV\", number = 5, allowParallel = T, verboseIter = F)\nCVModel = train(classe~., data = training, method = \"rf\", prox = F, trControl = CV)\nCVModel\n\npredsCVModel <- predict(CVModel, newdata = testing)\n\nconfMatrix <- confusionMatrix(predsCVModel, testing$classe)\nconfMatrix\n```",
    "created" : 1462128571681.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4267984648",
    "id" : "F2EE260",
    "lastKnownWriteTime" : 1462153439,
    "path" : "C:/Users/Milind/PracticalMachineLearning/content.rmd",
    "project_path" : "content.rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}